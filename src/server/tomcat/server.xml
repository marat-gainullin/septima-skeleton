<?xml version='1.0' encoding='utf-8'?>
<Server port="-1" shutdown="SHUTDOWN">
    <!-- Security listener. Documentation at /docs/config/listeners.html
    <Listener className="org.apache.catalina.security.SecurityListener" />
    -->
    <!--APR library loader. Documentation at /docs/apr.html
    <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
    -->
    <!-- Prevent memory leaks due to use of particular java/javax APIs-->
    <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener"/>
    <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"/>
    <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener"/>

    <!-- Global JNDI resources
         Documentation at /docs/jndi-resources-howto.html
    -->
    <!--GlobalNamingResources-->
    <!-- Editable user database that can also be used by
         UserDatabaseRealm to authenticate users
    -->
    <!--Resource name="UserDatabase" auth="Container"
    type="org.apache.catalina.UserDatabase"
    description="User database that can be updated and saved"
    factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
    pathname="../src/main/tomcat-conf/tomcat-users.xml" /-->
    <!--/GlobalNamingResources-->

    <!-- A "Service" is a collection of one or more "Connectors" that share
        a single "Container" Note:  A "Service" is not itself a "Container",
        so you may not define subcomponents such as "Valves" at this level.
        Documentation at /docs/config/service.html
    -->
    <Service name="Catalina">

        <!--The connectors can use a shared executor, you can define one or more named thread pools.
            If your application uses non blocking asynchronous IO model, then number of threads should be
            number-of-cores + 1, and in other case, it should be high enough to processes as much
            parallel requests as possible in presence of eventually blocked threads.
            Keep in mind the case of eventual waking up of all blocked thread at some mystery point in time.
        -->
        <Executor name="ContainerExecutor" namePrefix="tomcat-exec-"
                  maxThreads="5" minSpareThreads="0"/>

        <!-- A "Connector" represents an endpoint by which requests are received
             and responses are returned. Documentation at :
             Java HTTP Connector: /docs/config/http.html (blocking & non-blocking)
             Java AJP  Connector: /docs/config/ajp.html
             APR (HTTP/AJP) Connector: /docs/apr.html
             Define a non-SSL HTTP/1.1 Connector on port 8080
        -->
        <!-- A "Connector" using the shared thread pool-->
        <Connector executor="ContainerExecutor"
                   port="8080" protocol="HTTP/1.1"
                   connectionTimeout="20000"
                   redirectPort="8443" URIEncoding="UTF-8"/>

        <!-- Define a SSL HTTP/1.1 Connector on port 8443
        This connector uses the NIO implementation that requires the JSSE
        style configuration. When using the APR/native implementation, the
        OpenSSL style configuration is required as described in the APR/native
        documentation -->
        <!-- Define an AJP 1.3 Connector on port 8009
        <Connector executor="tomcatThreadPool" port="8009" protocol="AJP/1.3" redirectPort="8443" />
        -->
        <!-- An Engine represents the entry point (within Catalina) that processes
        every request.  The Engine implementation for Tomcat stand alone
        analyzes the HTTP headers included with the request, and passes them
        on to the appropriate Host (virtual host).
        Documentation at /docs/config/engine.html -->

        <!-- You should set jvmRoute to support load-balancing via AJP ie :
        <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
        -->
        <Engine name="Catalina" defaultHost="localhost">

            <!--For clustering, please take a look at documentation at:
            /docs/cluster-howto.html  (simple how to)
            /docs/config/cluster.html (reference documentation) -->
            <!--
            <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
            -->

            <!-- Use the LockOutRealm to prevent attempts to guess user passwords
            via a brute-force attack -->
            <!--Realm className="org.apache.catalina.realm.LockOutRealm"-->
            <!-- This Realm uses the UserDatabase configured in the global JNDI
            resources under the key "UserDatabase".  Any edits
            that are performed against this UserDatabase are immediately
            available for use by the Realm.  -->
            <!--Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                       resourceName="UserDatabase"/>
            </Realm-->

            <Host name="localhost" appBase="web-apps"
                  unpackWARs="true" autoDeploy="true">

                <!-- SingleSignOn valve, share authentication between web applications
                Documentation at: /docs/config/valve.html -->
                <!--
                <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
                -->

                <!-- Access log processes all example.
                Documentation at: /docs/config/valve.html
                Note: The pattern used is equivalent to using pattern="common" -->
                <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                       prefix="localhost_access_log" suffix=".txt"
                       pattern="%h %l %u %t &quot;%r&quot; %s %b"/>
                <Context path="${entities.context}"
                         docBase="${entities.base}"
                         reloadable="true">
                    <!--
                    <Realm className="org.apache.catalina.realm.DataSourceRealm" dataSourceName="${application.data-source}" localDataSource="true" roleNameCol="GROUP_NAME" userCredCol="USR_PASSWD" userNameCol="USR_NAME" userRoleTable="APP_USERS_GROUPS" userTable="APP_USERS">
                        <CredentialHandler className="org.apache.catalina.realm.MessageDigestCredentialHandler"
                                           algorithm="md5" />
                    </Realm>
                    <Resource driverClassName="org.h2.Driver" name="${data-source}" password="${data-source.dbpassword}" type="javax.sql.DataSource" url="${data-source.dburl}" username="${data-source.dbuser}"/>
                    -->
                </Context>
            </Host>
        </Engine>
    </Service>
</Server>